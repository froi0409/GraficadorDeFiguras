import java_cup.runtime.*;
import java.util.ArrayList;
import com.froi.graficador.lexer.*;
import com.froi.graficador.entidades.Advertencia;
import com.froi.graficador.entidades.*;

parser code {:

    private ArrayList<Figura> graficaciones;
    private ArrayList<String> errores;
    private ArrayList<Advertencia> listaErrores;
    private String colorF;
    private int[] v;

    public parser(GraficadorLex lex, ArrayList<Advertencia> listaErrores) {
        super(lex);
        //Desclaramos las listas que utilizaremos
        graficaciones = new ArrayList<>();
        errores = new ArrayList<>();
        v = new int[5];
        v[0] = 0;
        v[1] = 0;
        v[2] = 0;
        v[3] = 0;
        v[4] = 0;
        this.listaErrores = listaErrores;
    }
    public void report_error(String message, Object info) {
        System.out.println("reporterror");
    }
    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal");
    }
    public void syntax_error(Symbol cur_token) {
        System.out.println("syntaxerr" + symbl_name_from_id(cur_token.sym));
    }

    //Obtenemos las listas
    public ArrayList<Figura> getGraficaciones() {
        return graficaciones;
    }

:}

terminal String GRAFICAR, CIRCULO, CUADRADO, RECTANGULO, LINEA, POLIGONO, PARA, PARC, COM, ANIMAR, OBJETO, ANTERIOR, TIPOANIMACION, NUMERO, SIGSUMA, SIGMENOS, SIGMULTIPLICACION, SIGDIVISION, COLOR, UNARY;
non terminal texto, instruccion, graficacion, animacion, reglaAnimacion, reglaGraficacionCuatro, reglaGraficacionCinco, reglaGraficacionSeis;
non terminal Double valor;

//Jerarquizamos los simbolos
precedence left SIGSUMA, SIGMENOS;
precedence left SIGMULTIPLICACION, SIGDIVISION;
precedence right UNARY;

start with texto;

texto ::=   instruccion texto
            |
            ;

instruccion ::= graficacion
                | graficacion animacion
                ;

graficacion ::= GRAFICAR CIRCULO reglaGraficacionCuatro {: graficaciones.add(new Circulo(v[0], v[1], v[2], colorF)); System.out.println("CIRCULO\n"); :}
                | GRAFICAR CUADRADO reglaGraficacionCuatro {: graficaciones.add(new Cuadrado(v[0], v[1], v[2], colorF)); :}
                | GRAFICAR RECTANGULO reglaGraficacionCinco {: graficaciones.add(new Rectangulo(v[0], v[1], v[2], v[3], colorF)); :}
                | GRAFICAR LINEA reglaGraficacionCinco {: graficaciones.add(new Linea(v[0], v[1], v[2], v[3], colorF)); :}
                | GRAFICAR POLIGONO reglaGraficacionSeis {: graficaciones.add(new Poligono(v[0], v[1], v[2], v[3], v[4], colorF)); :}
                ;

reglaGraficacionCuatro ::=      PARA valor:v1 COM valor:v2 COM valor:v3 COM COLOR:nomColor PARC {: colorF = (String)nomColor; v[0]=v1.intValue(); v[1]=v2.intValue(); v[2]=v3.intValue(); :}
                                ;

reglaGraficacionCinco ::=       PARA valor:v1 COM valor:v2 COM valor:v3 COM valor:v4 COM COLOR:nomColor PARC {: colorF = (String)nomColor; v[0]=v1.intValue(); v[1]=v2.intValue(); v[2]=v3.intValue(); v[3]=v4.intValue(); :}
                                ;

reglaGraficacionSeis ::=        PARA valor:v1 COM valor:v2 COM valor:v3 COM valor:v4 COM valor:v5 COM COLOR:nomColor PARC {: colorF = (String)nomColor; v[0]=v1.intValue(); v[1]=v2.intValue(); v[2]=v3.intValue(); v[3]=v4.intValue(); v[4]=v5.intValue(); :}
                                ;

animacion ::=   ANIMAR OBJETO ANTERIOR PARA reglaAnimacion PARC
                ;

reglaAnimacion ::=  valor:v1 COM valor:v2 COM TIPOANIMACION:animation {: 
                                                                int lastElement = graficaciones.size()-1;
                                                                Figura figure = graficaciones.get(lastElement);
                                                                figure.setAnimacion(true);
                                                                figure.setPax(v1.intValue());
                                                                figure.setPay(v2.intValue());
                                                                figure.setTipoAnimacion(animation);
                                                                System.out.println("\n\n\nAnimacion en : " + figure.getPax() + "  " + figure.getPay() + "   " + figure.getTipoAnimacion() + "\n" + "Objeto a animar: " + figure + "\n\n\n");
                                                            :}
                    ;

valor::=    SIGMENOS valor:valo1                                  {: RESULT=valo1*-1; :}%prec UNARY
            | valor:valo1 SIGSUMA              valor:valo2        {: RESULT=valo1+valo2; :}
            | valor:valo1 SIGMENOS             valor:valo2        {: RESULT=valo1-valo2; :}
            | valor:valo1 SIGMULTIPLICACION    valor:valo2        {: RESULT=valo1*valo2; :}
            | valor:valo1 SIGDIVISION          valor:valo2        {: RESULT=valo1/valo2; :}
            | NUMERO:valo1                                        {: RESULT= new Double(valo1); :}
            | PARA valor:valo1 PARC                               {: RESULT= new Double(valo1); :}
            ;

