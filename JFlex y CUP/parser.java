
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\033\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\004\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\005\013\000\002\006\014\000\002" +
    "\007\017\000\002\010\010\000\002\011\007\000\002\012" +
    "\004\000\002\013\005\000\002\013\005\000\002\013\002" +
    "\000\002\014\004\000\002\015\005\000\002\015\005\000" +
    "\002\015\002\000\002\016\004\000\002\016\003\000\002" +
    "\017\003\000\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\006\002\uffff\004\005\001\002\000\004\002" +
    "\126\001\002\000\014\005\057\006\060\007\054\010\056" +
    "\011\055\001\002\000\010\002\ufffe\004\ufffe\015\011\001" +
    "\002\000\006\002\uffff\004\005\001\002\000\004\002\001" +
    "\001\002\000\004\016\013\001\002\000\006\002\ufffd\004" +
    "\ufffd\001\002\000\004\017\014\001\002\000\004\012\015" +
    "\001\002\000\010\012\022\021\017\023\021\001\002\000" +
    "\004\014\050\001\002\000\020\013\uffe8\014\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\001\002\000\020\013" +
    "\uffe9\014\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9" +
    "\001\002\000\006\012\022\021\017\001\002\000\010\012" +
    "\022\021\017\023\021\001\002\000\004\013\044\001\002" +
    "\000\014\013\uffef\014\uffef\022\035\023\036\026\uffef\001" +
    "\002\000\020\013\uffeb\014\uffeb\022\uffeb\023\uffeb\024\030" +
    "\025\027\026\uffeb\001\002\000\014\013\uffee\014\uffee\022" +
    "\uffee\023\uffee\026\uffee\001\002\000\010\012\022\021\017" +
    "\023\021\001\002\000\010\012\022\021\017\023\021\001" +
    "\002\000\020\013\uffeb\014\uffeb\022\uffeb\023\uffeb\024\030" +
    "\025\027\026\uffeb\001\002\000\014\013\uffed\014\uffed\022" +
    "\uffed\023\uffed\026\uffed\001\002\000\020\013\uffeb\014\uffeb" +
    "\022\uffeb\023\uffeb\024\030\025\027\026\uffeb\001\002\000" +
    "\014\013\uffec\014\uffec\022\uffec\023\uffec\026\uffec\001\002" +
    "\000\010\012\022\021\017\023\021\001\002\000\010\012" +
    "\022\021\017\023\021\001\002\000\010\013\ufff2\014\ufff2" +
    "\026\ufff2\001\002\000\014\013\uffef\014\uffef\022\035\023" +
    "\036\026\uffef\001\002\000\010\013\ufff0\014\ufff0\026\ufff0" +
    "\001\002\000\014\013\uffef\014\uffef\022\035\023\036\026" +
    "\uffef\001\002\000\010\013\ufff1\014\ufff1\026\ufff1\001\002" +
    "\000\006\002\ufff4\004\ufff4\001\002\000\004\013\046\001" +
    "\002\000\020\013\uffe7\014\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\001\002\000\020\013\uffea\014\uffea\022" +
    "\uffea\023\uffea\024\uffea\025\uffea\026\uffea\001\002\000\010" +
    "\012\022\021\017\023\021\001\002\000\004\014\052\001" +
    "\002\000\004\020\053\001\002\000\004\013\ufff3\001\002" +
    "\000\004\012\075\001\002\000\004\012\107\001\002\000" +
    "\004\012\075\001\002\000\004\012\061\001\002\000\004" +
    "\012\061\001\002\000\010\012\022\021\017\023\021\001" +
    "\002\000\010\002\ufffb\004\ufffb\015\ufffb\001\002\000\004" +
    "\014\064\001\002\000\010\012\022\021\017\023\021\001" +
    "\002\000\004\014\066\001\002\000\010\012\022\021\017" +
    "\023\021\001\002\000\004\014\070\001\002\000\004\026" +
    "\071\001\002\000\004\013\072\001\002\000\010\002\ufff7" +
    "\004\ufff7\015\ufff7\001\002\000\010\002\ufffc\004\ufffc\015" +
    "\ufffc\001\002\000\010\002\ufff9\004\ufff9\015\ufff9\001\002" +
    "\000\010\012\022\021\017\023\021\001\002\000\004\014" +
    "\077\001\002\000\010\012\022\021\017\023\021\001\002" +
    "\000\004\014\101\001\002\000\010\012\022\021\017\023" +
    "\021\001\002\000\004\014\103\001\002\000\010\012\022" +
    "\021\017\023\021\001\002\000\004\026\105\001\002\000" +
    "\004\013\106\001\002\000\010\002\ufff6\004\ufff6\015\ufff6" +
    "\001\002\000\010\012\022\021\017\023\021\001\002\000" +
    "\010\002\ufff8\004\ufff8\015\ufff8\001\002\000\004\014\112" +
    "\001\002\000\010\012\022\021\017\023\021\001\002\000" +
    "\004\014\114\001\002\000\010\012\022\021\017\023\021" +
    "\001\002\000\004\014\116\001\002\000\010\012\022\021" +
    "\017\023\021\001\002\000\004\014\120\001\002\000\010" +
    "\012\022\021\017\023\021\001\002\000\004\014\122\001" +
    "\002\000\004\026\123\001\002\000\004\013\124\001\002" +
    "\000\010\002\ufff5\004\ufff5\015\ufff5\001\002\000\010\002" +
    "\ufffa\004\ufffa\015\ufffa\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\010\002\003\003\006\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\011\001\001" +
    "\000\010\002\007\003\006\004\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\011\022\012\015\014\023\016" +
    "\024\017\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\046\001\001\000\012\012" +
    "\044\014\023\016\024\017\017\001\001\000\002\001\001" +
    "\000\004\013\036\001\001\000\004\015\025\001\001\000" +
    "\002\001\001\000\006\016\032\017\017\001\001\000\006" +
    "\016\030\017\017\001\001\000\004\015\031\001\001\000" +
    "\002\001\001\000\004\015\033\001\001\000\002\001\001" +
    "\000\010\014\041\016\024\017\017\001\001\000\010\014" +
    "\037\016\024\017\017\001\001\000\002\001\001\000\004" +
    "\013\040\001\001\000\002\001\001\000\004\013\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\050\014" +
    "\023\016\024\017\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\124\001\001\000" +
    "\004\007\107\001\001\000\004\006\073\001\001\000\004" +
    "\005\072\001\001\000\004\005\061\001\001\000\012\012" +
    "\062\014\023\016\024\017\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\064\014\023\016\024\017" +
    "\017\001\001\000\002\001\001\000\012\012\066\014\023" +
    "\016\024\017\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\075\014\023\016\024\017" +
    "\017\001\001\000\002\001\001\000\012\012\077\014\023" +
    "\016\024\017\017\001\001\000\002\001\001\000\012\012" +
    "\101\014\023\016\024\017\017\001\001\000\002\001\001" +
    "\000\012\012\103\014\023\016\024\017\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\110\014\023\016\024\017\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\112\014\023\016\024" +
    "\017\017\001\001\000\002\001\001\000\012\012\114\014" +
    "\023\016\024\017\017\001\001\000\002\001\001\000\012" +
    "\012\116\014\023\016\024\017\017\001\001\000\002\001" +
    "\001\000\012\012\120\014\023\016\024\017\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public parser(GraficadorLex lex) {
        super(lex);
    }
    public void report_error(String message, Object info) {
        System.out.println("reporterror");
    }
    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal");
    }
    public void syntax_error(Symbol cur_token) {
        System.out.println("syntaxerr" + symbl_name_from_id(cur_token.sym));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // texto ::= instruccion texto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= texto EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // texto ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruccion ::= graficacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= graficacion animacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // graficacion ::= GRAFICAR CIRCULO reglaGraficacionCuatro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("graficacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // graficacion ::= GRAFICAR CUADRADO reglaGraficacionCuatro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("graficacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // graficacion ::= GRAFICAR RECTANGULO reglaGraficacionCinco 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("graficacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // graficacion ::= GRAFICAR LINEA reglaGraficacionCinco 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("graficacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // graficacion ::= GRAFICAR POLIGONO reglaGraficacionSeis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("graficacion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // reglaGraficacionCuatro ::= PARA suma COM suma COM suma COM COLOR PARC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reglaGraficacionCuatro",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // reglaGraficacionCinco ::= PARA suma COM suma COM suma COM suma COLOR PARC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reglaGraficacionCinco",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // reglaGraficacionSeis ::= PARA suma COM suma COM suma COM suma COM suma COM COLOR PARC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reglaGraficacionSeis",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // animacion ::= ANIMAR OBJETO ANTERIOR PARA reglaAnimacion PARC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("animacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // reglaAnimacion ::= suma COM suma COM TIPOANIMACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reglaAnimacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // suma ::= multiplicacion sumap 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("suma",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sumap ::= SIGSUMA multiplicacion sumap 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumap",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sumap ::= SIGMENOS multiplicacion sumap 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumap",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sumap ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumap",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // multiplicacion ::= unario multiplicacionp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // multiplicacionp ::= SIGMULTIPLICACION unario multiplicacionp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicacionp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // multiplicacionp ::= SIGDIVISION unario multiplicacionp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicacionp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // multiplicacionp ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicacionp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // unario ::= SIGMENOS elemento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unario",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // unario ::= elemento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unario",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // elemento ::= NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elemento",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // elemento ::= PARA suma PARC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elemento",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
