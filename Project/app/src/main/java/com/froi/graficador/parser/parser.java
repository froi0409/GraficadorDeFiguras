package com.froi.graficador.parser;
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import com.froi.graficador.lexer.*;
import com.froi.graficador.entidades.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(Scanner s, SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\004\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\005\013\000\002\006\014\000\002" +
    "\007\017\000\002\010\010\000\002\011\007\000\002\012" +
    "\003\000\002\013\004\000\002\014\005\000\002\014\005" +
    "\000\002\014\002\000\002\015\004\000\002\016\005\000" +
    "\002\016\005\000\002\016\002\000\002\017\004\000\002" +
    "\017\003\000\002\020\003\000\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\006\002\uffff\004\005\001\002\000\004\002" +
    "\127\001\002\000\014\005\057\006\060\007\054\010\056" +
    "\011\055\001\002\000\010\002\ufffe\004\ufffe\015\011\001" +
    "\002\000\006\002\uffff\004\005\001\002\000\004\002\001" +
    "\001\002\000\004\016\013\001\002\000\006\002\ufffd\004" +
    "\ufffd\001\002\000\004\017\014\001\002\000\004\012\015" +
    "\001\002\000\010\012\022\021\020\023\021\001\002\000" +
    "\004\014\050\001\002\000\020\013\uffe8\014\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\001\002\000\020\013" +
    "\uffe7\014\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\001\002\000\006\012\022\021\020\001\002\000\010\012" +
    "\022\021\020\023\021\001\002\000\004\013\044\001\002" +
    "\000\020\013\uffea\014\uffea\022\uffea\023\uffea\024\037\025" +
    "\036\026\uffea\001\002\000\014\013\uffee\014\uffee\022\026" +
    "\023\027\026\uffee\001\002\000\010\012\022\021\020\023" +
    "\021\001\002\000\010\012\022\021\020\023\021\001\002" +
    "\000\010\013\ufff1\014\ufff1\026\ufff1\001\002\000\014\013" +
    "\uffee\014\uffee\022\026\023\027\026\uffee\001\002\000\010" +
    "\013\uffef\014\uffef\026\uffef\001\002\000\014\013\uffee\014" +
    "\uffee\022\026\023\027\026\uffee\001\002\000\010\013\ufff0" +
    "\014\ufff0\026\ufff0\001\002\000\014\013\uffed\014\uffed\022" +
    "\uffed\023\uffed\026\uffed\001\002\000\010\012\022\021\020" +
    "\023\021\001\002\000\010\012\022\021\020\023\021\001" +
    "\002\000\020\013\uffea\014\uffea\022\uffea\023\uffea\024\037" +
    "\025\036\026\uffea\001\002\000\014\013\uffec\014\uffec\022" +
    "\uffec\023\uffec\026\uffec\001\002\000\020\013\uffea\014\uffea" +
    "\022\uffea\023\uffea\024\037\025\036\026\uffea\001\002\000" +
    "\014\013\uffeb\014\uffeb\022\uffeb\023\uffeb\026\uffeb\001\002" +
    "\000\006\002\ufff4\004\ufff4\001\002\000\004\013\046\001" +
    "\002\000\020\013\uffe6\014\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\001\002\000\020\013\uffe9\014\uffe9\022" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\001\002\000\010" +
    "\012\022\021\020\023\021\001\002\000\004\014\052\001" +
    "\002\000\004\020\053\001\002\000\004\013\ufff3\001\002" +
    "\000\004\012\076\001\002\000\004\012\110\001\002\000" +
    "\004\012\076\001\002\000\004\012\061\001\002\000\004" +
    "\012\061\001\002\000\010\012\022\021\020\023\021\001" +
    "\002\000\010\002\ufffb\004\ufffb\015\ufffb\001\002\000\006" +
    "\014\ufff2\026\ufff2\001\002\000\004\014\065\001\002\000" +
    "\010\012\022\021\020\023\021\001\002\000\004\014\067" +
    "\001\002\000\010\012\022\021\020\023\021\001\002\000" +
    "\004\014\071\001\002\000\004\026\072\001\002\000\004" +
    "\013\073\001\002\000\010\002\ufff7\004\ufff7\015\ufff7\001" +
    "\002\000\010\002\ufffc\004\ufffc\015\ufffc\001\002\000\010" +
    "\002\ufff9\004\ufff9\015\ufff9\001\002\000\010\012\022\021" +
    "\020\023\021\001\002\000\004\014\100\001\002\000\010" +
    "\012\022\021\020\023\021\001\002\000\004\014\102\001" +
    "\002\000\010\012\022\021\020\023\021\001\002\000\004" +
    "\014\104\001\002\000\010\012\022\021\020\023\021\001" +
    "\002\000\004\026\106\001\002\000\004\013\107\001\002" +
    "\000\010\002\ufff6\004\ufff6\015\ufff6\001\002\000\010\012" +
    "\022\021\020\023\021\001\002\000\010\002\ufff8\004\ufff8" +
    "\015\ufff8\001\002\000\004\014\113\001\002\000\010\012" +
    "\022\021\020\023\021\001\002\000\004\014\115\001\002" +
    "\000\010\012\022\021\020\023\021\001\002\000\004\014" +
    "\117\001\002\000\010\012\022\021\020\023\021\001\002" +
    "\000\004\014\121\001\002\000\010\012\022\021\020\023" +
    "\021\001\002\000\004\014\123\001\002\000\004\026\124" +
    "\001\002\000\004\013\125\001\002\000\010\002\ufff5\004" +
    "\ufff5\015\ufff5\001\002\000\010\002\ufffa\004\ufffa\015\ufffa" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\125\000\010\002\003\003\006\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\011\001\001" +
    "\000\010\002\007\003\006\004\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\011\022\013\015\015\024\017" +
    "\023\020\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\046\001\001\000\012\013" +
    "\044\015\024\017\023\020\016\001\001\000\002\001\001" +
    "\000\004\016\034\001\001\000\004\014\027\001\001\000" +
    "\010\015\032\017\023\020\016\001\001\000\010\015\030" +
    "\017\023\020\016\001\001\000\002\001\001\000\004\014" +
    "\031\001\001\000\002\001\001\000\004\014\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\041\020" +
    "\016\001\001\000\006\017\037\020\016\001\001\000\004" +
    "\016\040\001\001\000\002\001\001\000\004\016\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\050\015" +
    "\024\017\023\020\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\125\001\001\000" +
    "\004\007\110\001\001\000\004\006\074\001\001\000\004" +
    "\005\073\001\001\000\004\005\061\001\001\000\014\012" +
    "\063\013\062\015\024\017\023\020\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\012" +
    "\065\013\062\015\024\017\023\020\016\001\001\000\002" +
    "\001\001\000\014\012\067\013\062\015\024\017\023\020" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\012\076\013\062\015\024\017\023\020\016" +
    "\001\001\000\002\001\001\000\014\012\100\013\062\015" +
    "\024\017\023\020\016\001\001\000\002\001\001\000\014" +
    "\012\102\013\062\015\024\017\023\020\016\001\001\000" +
    "\002\001\001\000\014\012\104\013\062\015\024\017\023" +
    "\020\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\111\013\062\015\024\017\023" +
    "\020\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\012\113\013\062\015\024\017\023\020\016\001\001" +
    "\000\002\001\001\000\014\012\115\013\062\015\024\017" +
    "\023\020\016\001\001\000\002\001\001\000\014\012\117" +
    "\013\062\015\024\017\023\020\016\001\001\000\002\001" +
    "\001\000\014\012\121\013\062\015\024\017\023\020\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ArrayList<Figura> graficaciones;
    private ArrayList<String> errores;
    private int valor1,valor2,valor3,valor4,valor5;
    private String colorF;

    public parser(GraficadorLex lex) {
        super(lex);
        //Desclaramos las listas que utilizaremos
        graficaciones = new ArrayList<>();
        errores = new ArrayList<>();
    }
    public void report_error(String message, Object info) {
        System.out.println("reporterror");
    }
    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal");
    }
    public void syntax_error(Symbol cur_token) {
        System.out.println("syntaxerr" + symbl_name_from_id(cur_token.sym));
    }

    //Obtenemos las listas
    public ArrayList<Figura> getGraficaciones() {
        return graficaciones;
    }
    public ArrayList<String> getErrores() {
        return errores;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // texto ::= instruccion texto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= texto EOF 
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // texto ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",0, ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruccion ::= graficacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= graficacion animacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",1, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // graficacion ::= GRAFICAR CIRCULO reglaGraficacionCuatro 
            {
              Object RESULT =null;
		 graficaciones.add(new Circulo(valor1, valor2, valor3, colorF)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("graficacion",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // graficacion ::= GRAFICAR CUADRADO reglaGraficacionCuatro 
            {
              Object RESULT =null;
		 graficaciones.add(new Cuadrado(valor1, valor2, valor3, colorF)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("graficacion",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // graficacion ::= GRAFICAR RECTANGULO reglaGraficacionCinco 
            {
              Object RESULT =null;
		 graficaciones.add(new Rectangulo(valor1, valor2, valor3, valor4, colorF)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("graficacion",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // graficacion ::= GRAFICAR LINEA reglaGraficacionCinco 
            {
              Object RESULT =null;
		 graficaciones.add(new Linea(valor1, valor2, valor3, valor4, colorF)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("graficacion",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // graficacion ::= GRAFICAR POLIGONO reglaGraficacionSeis 
            {
              Object RESULT =null;
		 graficaciones.add(new Poligono(valor1, valor2, valor3, valor4, valor5, colorF)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("graficacion",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // reglaGraficacionCuatro ::= PARA valor COM valor COM valor COM COLOR PARC 
            {
              Object RESULT =null;
		int v1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int v1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object v1 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int v2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int v2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object v2 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v3left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v3right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object v3 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v4left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v4right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v4 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 valor1 = Integer.valueOf((String)v1); valor2 = Integer.valueOf((String)v2); valor3 = Integer.valueOf((String)v3); colorF = (String)v4; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reglaGraficacionCuatro",3, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // reglaGraficacionCinco ::= PARA valor COM valor COM valor COM valor COLOR PARC 
            {
              Object RESULT =null;
		int v1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int v1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object v1 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int v2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int v2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object v2 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int v3left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int v3right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object v3 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int v4left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v4right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v4 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v5left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v5right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v5 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 valor1 = Integer.valueOf((String)v1); valor2 = Integer.valueOf((String)v2); valor3 = Integer.valueOf((String)v3); valor4 = Integer.valueOf((String)v4); colorF = (String)v5; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reglaGraficacionCinco",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // reglaGraficacionSeis ::= PARA valor COM valor COM valor COM valor COM valor COM COLOR PARC 
            {
              Object RESULT =null;
		int v1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int v1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object v1 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int v2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int v2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object v2 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int v3left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int v3right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object v3 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int v4left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int v4right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object v4 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int v5left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v5right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object v5 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int v6left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int v6right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v6 = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 valor1 = Integer.valueOf((String)v1); valor2 = Integer.valueOf((String)v2); valor3 = Integer.valueOf((String)v3); valor4 = Integer.valueOf((String)v4); valor5 = Integer.valueOf((String)v5); colorF = (String)v6; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reglaGraficacionSeis",5, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // animacion ::= ANIMAR OBJETO ANTERIOR PARA reglaAnimacion PARC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("animacion",6, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // reglaAnimacion ::= suma COM suma COM TIPOANIMACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reglaAnimacion",7, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // valor ::= suma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",8, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // suma ::= multiplicacion sumap 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("suma",9, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sumap ::= SIGSUMA multiplicacion sumap 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumap",10, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sumap ::= SIGMENOS multiplicacion sumap 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumap",10, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sumap ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sumap",10, ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // multiplicacion ::= unario multiplicacionp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicacion",11, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // multiplicacionp ::= SIGMULTIPLICACION unario multiplicacionp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicacionp",12, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // multiplicacionp ::= SIGDIVISION unario multiplicacionp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicacionp",12, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // multiplicacionp ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicacionp",12, ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // unario ::= SIGMENOS elemento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unario",13, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // unario ::= elemento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unario",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // elemento ::= NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elemento",14, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // elemento ::= PARA suma PARC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elemento",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
